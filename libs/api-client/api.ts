/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * Deployment trigger information
 * @export
 * @interface DeploymentInfo
 */
export interface DeploymentInfo {
    /**
     * 
     * @type {string}
     * @memberof DeploymentInfo
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof DeploymentInfo
     */
    'environment': string;
    /**
     * 
     * @type {string}
     * @memberof DeploymentInfo
     */
    'workflow': string;
}
/**
 * Response for admin GET /admin/deployment/status
 * @export
 * @interface DeploymentStatusResponse
 */
export interface DeploymentStatusResponse {
    /**
     * 
     * @type {string}
     * @memberof DeploymentStatusResponse
     */
    'status': string;
    /**
     * 
     * @type {string}
     * @memberof DeploymentStatusResponse
     */
    'conclusion'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DeploymentStatusResponse
     */
    'url'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DeploymentStatusResponse
     */
    'created_at'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DeploymentStatusResponse
     */
    'updated_at'?: string | null;
}
/**
 * Individual feature control with enabled flag
 * @export
 * @interface FeatureControl
 */
export interface FeatureControl {
    /**
     * 
     * @type {boolean}
     * @memberof FeatureControl
     */
    'enabled': boolean;
}
/**
 * 
 * @export
 * @interface FeedbackRequestSchema
 */
export interface FeedbackRequestSchema {
    /**
     * 
     * @type {string}
     * @memberof FeedbackRequestSchema
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof FeedbackRequestSchema
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface FeedbackResponseSchema
 */
export interface FeedbackResponseSchema {
    /**
     * 
     * @type {string}
     * @memberof FeedbackResponseSchema
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof FeedbackResponseSchema
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof FeedbackResponseSchema
     */
    'timestamp': string;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface PageFeedbackResponseSchema
 */
export interface PageFeedbackResponseSchema {
    /**
     * 
     * @type {Array<FeedbackResponseSchema>}
     * @memberof PageFeedbackResponseSchema
     */
    'items': Array<FeedbackResponseSchema>;
    /**
     * 
     * @type {number}
     * @memberof PageFeedbackResponseSchema
     */
    'total': number;
    /**
     * 
     * @type {number}
     * @memberof PageFeedbackResponseSchema
     */
    'page': number;
    /**
     * 
     * @type {number}
     * @memberof PageFeedbackResponseSchema
     */
    'size': number;
    /**
     * 
     * @type {number}
     * @memberof PageFeedbackResponseSchema
     */
    'pages': number;
}
/**
 * 
 * @export
 * @interface Token
 */
export interface Token {
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'access_token': string;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'token_type': string;
}
/**
 * 
 * @export
 * @interface TranslationSchema
 */
export interface TranslationSchema {
    /**
     * 
     * @type {string}
     * @memberof TranslationSchema
     */
    'from_language': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof TranslationSchema
     */
    'text_list': Array<string>;
    /**
     * 
     * @type {string}
     * @memberof TranslationSchema
     */
    'to_language': string;
}
/**
 * 
 * @export
 * @interface UserSchema
 */
export interface UserSchema {
    /**
     * 
     * @type {string}
     * @memberof UserSchema
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UserSchema
     */
    'full_name'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof UserSchema
     */
    'disabled'?: boolean | null;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}
/**
 * 
 * @export
 * @interface VoiceCommandRequest
 */
export interface VoiceCommandRequest {
    /**
     * 
     * @type {string}
     * @memberof VoiceCommandRequest
     */
    'text': string;
}
/**
 * Response for admin GET /admin/config
 * @export
 * @interface WidgetConfigAdminResponse
 */
export interface WidgetConfigAdminResponse {
    /**
     * 
     * @type {number}
     * @memberof WidgetConfigAdminResponse
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof WidgetConfigAdminResponse
     */
    'version': string;
    /**
     * 
     * @type {WidgetConfigJson}
     * @memberof WidgetConfigAdminResponse
     */
    'config': WidgetConfigJson;
    /**
     * 
     * @type {string}
     * @memberof WidgetConfigAdminResponse
     */
    'deployment_status': string;
}
/**
 * Widget configuration JSON structure
 * @export
 * @interface WidgetConfigJson
 */
export interface WidgetConfigJson {
    /**
     * 
     * @type {WidgetFeaturesOutput}
     * @memberof WidgetConfigJson
     */
    'features': WidgetFeaturesOutput;
}
/**
 * Response for public GET /public/widget/config
 * @export
 * @interface WidgetConfigPublicResponse
 */
export interface WidgetConfigPublicResponse {
    /**
     * 
     * @type {string}
     * @memberof WidgetConfigPublicResponse
     */
    'version': string;
    /**
     * 
     * @type {WidgetFeaturesOutput}
     * @memberof WidgetConfigPublicResponse
     */
    'features': WidgetFeaturesOutput;
}
/**
 * Request for admin PUT /admin/config
 * @export
 * @interface WidgetConfigUpdateRequest
 */
export interface WidgetConfigUpdateRequest {
    /**
     * 
     * @type {WidgetFeaturesInput}
     * @memberof WidgetConfigUpdateRequest
     */
    'features': WidgetFeaturesInput;
    /**
     * 
     * @type {string}
     * @memberof WidgetConfigUpdateRequest
     */
    'version'?: string | null;
}
/**
 * Response for admin PUT /admin/config
 * @export
 * @interface WidgetConfigUpdateResponse
 */
export interface WidgetConfigUpdateResponse {
    /**
     * 
     * @type {string}
     * @memberof WidgetConfigUpdateResponse
     */
    'message': string;
    /**
     * 
     * @type {WidgetConfigJson}
     * @memberof WidgetConfigUpdateResponse
     */
    'config': WidgetConfigJson;
    /**
     * 
     * @type {DeploymentInfo}
     * @memberof WidgetConfigUpdateResponse
     */
    'deployment': DeploymentInfo;
}
/**
 * All widget controls
 * @export
 * @interface WidgetControls
 */
export interface WidgetControls {
    /**
     * 
     * @type {FeatureControl}
     * @memberof WidgetControls
     */
    'contrast': FeatureControl;
    /**
     * 
     * @type {FeatureControl}
     * @memberof WidgetControls
     */
    'reader': FeatureControl;
    /**
     * 
     * @type {FeatureControl}
     * @memberof WidgetControls
     */
    'font_size': FeatureControl;
    /**
     * 
     * @type {FeatureControl}
     * @memberof WidgetControls
     */
    'font_family': FeatureControl;
    /**
     * 
     * @type {FeatureControl}
     * @memberof WidgetControls
     */
    'line_height': FeatureControl;
    /**
     * 
     * @type {FeatureControl}
     * @memberof WidgetControls
     */
    'letter_spacing': FeatureControl;
    /**
     * 
     * @type {FeatureControl}
     * @memberof WidgetControls
     */
    'disable_animations': FeatureControl;
    /**
     * 
     * @type {FeatureControl}
     * @memberof WidgetControls
     */
    'hide_images': FeatureControl;
    /**
     * 
     * @type {FeatureControl}
     * @memberof WidgetControls
     */
    'reading_guide': FeatureControl;
    /**
     * 
     * @type {FeatureControl}
     * @memberof WidgetControls
     */
    'voice_navigation': FeatureControl;
    /**
     * 
     * @type {FeatureControl}
     * @memberof WidgetControls
     */
    'highlight_links': FeatureControl;
    /**
     * 
     * @type {FeatureControl}
     * @memberof WidgetControls
     */
    'saturation': FeatureControl;
    /**
     * 
     * @type {FeatureControl}
     * @memberof WidgetControls
     */
    'color_filter': FeatureControl;
}
/**
 * Widget features configuration
 * @export
 * @interface WidgetFeaturesInput
 */
export interface WidgetFeaturesInput {
    /**
     * 
     * @type {FeatureControl}
     * @memberof WidgetFeaturesInput
     */
    'language_selector': FeatureControl;
    /**
     * 
     * @type {FeatureControl}
     * @memberof WidgetFeaturesInput
     */
    'accessibility_profiles': FeatureControl;
    /**
     * 
     * @type {WidgetControls}
     * @memberof WidgetFeaturesInput
     */
    'widget_controls': WidgetControls;
}
/**
 * Widget features configuration
 * @export
 * @interface WidgetFeaturesOutput
 */
export interface WidgetFeaturesOutput {
    /**
     * 
     * @type {FeatureControl}
     * @memberof WidgetFeaturesOutput
     */
    'language_selector': FeatureControl;
    /**
     * 
     * @type {FeatureControl}
     * @memberof WidgetFeaturesOutput
     */
    'accessibility_profiles': FeatureControl;
    /**
     * 
     * @type {WidgetControls}
     * @memberof WidgetFeaturesOutput
     */
    'widget_controls': WidgetControls;
}

/**
 * AdminApi - axios parameter creator
 * @export
 */
export const AdminApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get widget configuration
         * @summary Get Config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfigAdminConfigGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/config`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Check deployment status from GitHub Actions
         * @summary Get Deployment Status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeploymentStatusAdminDeploymentStatusGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/deployment/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Feedbacks
         * @param {number} [page] Page number
         * @param {number} [size] Page size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeedbacksAdminFeedbackGet: async (page?: number, size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/feedback`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login For Access Token
         * @param {string} username 
         * @param {string} password 
         * @param {string | null} [grantType] 
         * @param {string} [scope] 
         * @param {string | null} [clientId] 
         * @param {string | null} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginForAccessTokenAdminLoginPost: async (username: string, password: string, grantType?: string | null, scope?: string, clientId?: string | null, clientSecret?: string | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('loginForAccessTokenAdminLoginPost', 'username', username)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('loginForAccessTokenAdminLoginPost', 'password', password)
            const localVarPath = `/admin/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (grantType !== undefined) { 
                localVarFormParams.set('grant_type', grantType as any);
            }
    
            if (username !== undefined) { 
                localVarFormParams.set('username', username as any);
            }
    
            if (password !== undefined) { 
                localVarFormParams.set('password', password as any);
            }
    
            if (scope !== undefined) { 
                localVarFormParams.set('scope', scope as any);
            }
    
            if (clientId !== undefined) { 
                localVarFormParams.set('client_id', clientId as any);
            }
    
            if (clientSecret !== undefined) { 
                localVarFormParams.set('client_secret', clientSecret as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Read Users Me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readUsersMeAdminUsersMeGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/users/me/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update widget configuration and trigger deployment
         * @summary Update Config
         * @param {WidgetConfigUpdateRequest} widgetConfigUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConfigAdminConfigPut: async (widgetConfigUpdateRequest: WidgetConfigUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'widgetConfigUpdateRequest' is not null or undefined
            assertParamExists('updateConfigAdminConfigPut', 'widgetConfigUpdateRequest', widgetConfigUpdateRequest)
            const localVarPath = `/admin/config`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(widgetConfigUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminApi - functional programming interface
 * @export
 */
export const AdminApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminApiAxiosParamCreator(configuration)
    return {
        /**
         * Get widget configuration
         * @summary Get Config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConfigAdminConfigGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WidgetConfigAdminResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConfigAdminConfigGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.getConfigAdminConfigGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Check deployment status from GitHub Actions
         * @summary Get Deployment Status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeploymentStatusAdminDeploymentStatusGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeploymentStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeploymentStatusAdminDeploymentStatusGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.getDeploymentStatusAdminDeploymentStatusGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Feedbacks
         * @param {number} [page] Page number
         * @param {number} [size] Page size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFeedbacksAdminFeedbackGet(page?: number, size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageFeedbackResponseSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFeedbacksAdminFeedbackGet(page, size, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.getFeedbacksAdminFeedbackGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Login For Access Token
         * @param {string} username 
         * @param {string} password 
         * @param {string | null} [grantType] 
         * @param {string} [scope] 
         * @param {string | null} [clientId] 
         * @param {string | null} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginForAccessTokenAdminLoginPost(username: string, password: string, grantType?: string | null, scope?: string, clientId?: string | null, clientSecret?: string | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginForAccessTokenAdminLoginPost(username, password, grantType, scope, clientId, clientSecret, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.loginForAccessTokenAdminLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Read Users Me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async readUsersMeAdminUsersMeGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.readUsersMeAdminUsersMeGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.readUsersMeAdminUsersMeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update widget configuration and trigger deployment
         * @summary Update Config
         * @param {WidgetConfigUpdateRequest} widgetConfigUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateConfigAdminConfigPut(widgetConfigUpdateRequest: WidgetConfigUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WidgetConfigUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateConfigAdminConfigPut(widgetConfigUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.updateConfigAdminConfigPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AdminApi - factory interface
 * @export
 */
export const AdminApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminApiFp(configuration)
    return {
        /**
         * Get widget configuration
         * @summary Get Config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfigAdminConfigGet(options?: any): AxiosPromise<WidgetConfigAdminResponse> {
            return localVarFp.getConfigAdminConfigGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Check deployment status from GitHub Actions
         * @summary Get Deployment Status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeploymentStatusAdminDeploymentStatusGet(options?: any): AxiosPromise<DeploymentStatusResponse> {
            return localVarFp.getDeploymentStatusAdminDeploymentStatusGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Feedbacks
         * @param {number} [page] Page number
         * @param {number} [size] Page size
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeedbacksAdminFeedbackGet(page?: number, size?: number, options?: any): AxiosPromise<PageFeedbackResponseSchema> {
            return localVarFp.getFeedbacksAdminFeedbackGet(page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login For Access Token
         * @param {string} username 
         * @param {string} password 
         * @param {string | null} [grantType] 
         * @param {string} [scope] 
         * @param {string | null} [clientId] 
         * @param {string | null} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginForAccessTokenAdminLoginPost(username: string, password: string, grantType?: string | null, scope?: string, clientId?: string | null, clientSecret?: string | null, options?: any): AxiosPromise<Token> {
            return localVarFp.loginForAccessTokenAdminLoginPost(username, password, grantType, scope, clientId, clientSecret, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Read Users Me
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        readUsersMeAdminUsersMeGet(options?: any): AxiosPromise<UserSchema> {
            return localVarFp.readUsersMeAdminUsersMeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Update widget configuration and trigger deployment
         * @summary Update Config
         * @param {WidgetConfigUpdateRequest} widgetConfigUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateConfigAdminConfigPut(widgetConfigUpdateRequest: WidgetConfigUpdateRequest, options?: any): AxiosPromise<WidgetConfigUpdateResponse> {
            return localVarFp.updateConfigAdminConfigPut(widgetConfigUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdminApi - interface
 * @export
 * @interface AdminApi
 */
export interface AdminApiInterface {
    /**
     * Get widget configuration
     * @summary Get Config
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    getConfigAdminConfigGet(options?: RawAxiosRequestConfig): AxiosPromise<WidgetConfigAdminResponse>;

    /**
     * Check deployment status from GitHub Actions
     * @summary Get Deployment Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    getDeploymentStatusAdminDeploymentStatusGet(options?: RawAxiosRequestConfig): AxiosPromise<DeploymentStatusResponse>;

    /**
     * 
     * @summary Get Feedbacks
     * @param {number} [page] Page number
     * @param {number} [size] Page size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    getFeedbacksAdminFeedbackGet(page?: number, size?: number, options?: RawAxiosRequestConfig): AxiosPromise<PageFeedbackResponseSchema>;

    /**
     * 
     * @summary Login For Access Token
     * @param {string} username 
     * @param {string} password 
     * @param {string | null} [grantType] 
     * @param {string} [scope] 
     * @param {string | null} [clientId] 
     * @param {string | null} [clientSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    loginForAccessTokenAdminLoginPost(username: string, password: string, grantType?: string | null, scope?: string, clientId?: string | null, clientSecret?: string | null, options?: RawAxiosRequestConfig): AxiosPromise<Token>;

    /**
     * 
     * @summary Read Users Me
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    readUsersMeAdminUsersMeGet(options?: RawAxiosRequestConfig): AxiosPromise<UserSchema>;

    /**
     * Update widget configuration and trigger deployment
     * @summary Update Config
     * @param {WidgetConfigUpdateRequest} widgetConfigUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    updateConfigAdminConfigPut(widgetConfigUpdateRequest: WidgetConfigUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<WidgetConfigUpdateResponse>;

}

/**
 * AdminApi - object-oriented interface
 * @export
 * @class AdminApi
 * @extends {BaseAPI}
 */
export class AdminApi extends BaseAPI implements AdminApiInterface {
    /**
     * Get widget configuration
     * @summary Get Config
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public getConfigAdminConfigGet(options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).getConfigAdminConfigGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Check deployment status from GitHub Actions
     * @summary Get Deployment Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public getDeploymentStatusAdminDeploymentStatusGet(options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).getDeploymentStatusAdminDeploymentStatusGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Feedbacks
     * @param {number} [page] Page number
     * @param {number} [size] Page size
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public getFeedbacksAdminFeedbackGet(page?: number, size?: number, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).getFeedbacksAdminFeedbackGet(page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login For Access Token
     * @param {string} username 
     * @param {string} password 
     * @param {string | null} [grantType] 
     * @param {string} [scope] 
     * @param {string | null} [clientId] 
     * @param {string | null} [clientSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public loginForAccessTokenAdminLoginPost(username: string, password: string, grantType?: string | null, scope?: string, clientId?: string | null, clientSecret?: string | null, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).loginForAccessTokenAdminLoginPost(username, password, grantType, scope, clientId, clientSecret, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Read Users Me
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public readUsersMeAdminUsersMeGet(options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).readUsersMeAdminUsersMeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update widget configuration and trigger deployment
     * @summary Update Config
     * @param {WidgetConfigUpdateRequest} widgetConfigUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public updateConfigAdminConfigPut(widgetConfigUpdateRequest: WidgetConfigUpdateRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).updateConfigAdminConfigPut(widgetConfigUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ApiApi - axios parameter creator
 * @export
 */
export const ApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Convert Audio
         * @param {string} text 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        convertAudioApiV1ConvertAudioPost: async (text: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'text' is not null or undefined
            assertParamExists('convertAudioApiV1ConvertAudioPost', 'text', text)
            const localVarPath = `/api/v1/convert-audio/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (text !== undefined) {
                localVarQueryParameter['text'] = text;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Describe Image
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeImageApiV1DescribeImagePost: async (file: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('describeImageApiV1DescribeImagePost', 'file', file)
            const localVarPath = `/api/v1/describe-image/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Post Feedback
         * @param {FeedbackRequestSchema} feedbackRequestSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFeedbackApiV1FeedbackPost: async (feedbackRequestSchema: FeedbackRequestSchema, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'feedbackRequestSchema' is not null or undefined
            assertParamExists('postFeedbackApiV1FeedbackPost', 'feedbackRequestSchema', feedbackRequestSchema)
            const localVarPath = `/api/v1/feedback`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(feedbackRequestSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Process Voice Command
         * @param {VoiceCommandRequest} voiceCommandRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processVoiceCommandApiV1VoiceNavigationCommandPost: async (voiceCommandRequest: VoiceCommandRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'voiceCommandRequest' is not null or undefined
            assertParamExists('processVoiceCommandApiV1VoiceNavigationCommandPost', 'voiceCommandRequest', voiceCommandRequest)
            const localVarPath = `/api/v1/voice-navigation/command`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(voiceCommandRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Translate Text List
         * @param {TranslationSchema} translationSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        translateTextListApiV1TranslatePost: async (translationSchema: TranslationSchema, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'translationSchema' is not null or undefined
            assertParamExists('translateTextListApiV1TranslatePost', 'translationSchema', translationSchema)
            const localVarPath = `/api/v1/translate/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(translationSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApiApi - functional programming interface
 * @export
 */
export const ApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Convert Audio
         * @param {string} text 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async convertAudioApiV1ConvertAudioPost(text: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.convertAudioApiV1ConvertAudioPost(text, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiApi.convertAudioApiV1ConvertAudioPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Describe Image
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async describeImageApiV1DescribeImagePost(file: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.describeImageApiV1DescribeImagePost(file, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiApi.describeImageApiV1DescribeImagePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Post Feedback
         * @param {FeedbackRequestSchema} feedbackRequestSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postFeedbackApiV1FeedbackPost(feedbackRequestSchema: FeedbackRequestSchema, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedbackRequestSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postFeedbackApiV1FeedbackPost(feedbackRequestSchema, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiApi.postFeedbackApiV1FeedbackPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Process Voice Command
         * @param {VoiceCommandRequest} voiceCommandRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processVoiceCommandApiV1VoiceNavigationCommandPost(voiceCommandRequest: VoiceCommandRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.processVoiceCommandApiV1VoiceNavigationCommandPost(voiceCommandRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiApi.processVoiceCommandApiV1VoiceNavigationCommandPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Translate Text List
         * @param {TranslationSchema} translationSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async translateTextListApiV1TranslatePost(translationSchema: TranslationSchema, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.translateTextListApiV1TranslatePost(translationSchema, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiApi.translateTextListApiV1TranslatePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ApiApi - factory interface
 * @export
 */
export const ApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApiApiFp(configuration)
    return {
        /**
         * 
         * @summary Convert Audio
         * @param {string} text 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        convertAudioApiV1ConvertAudioPost(text: string, options?: any): AxiosPromise<void> {
            return localVarFp.convertAudioApiV1ConvertAudioPost(text, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Describe Image
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        describeImageApiV1DescribeImagePost(file: File, options?: any): AxiosPromise<any> {
            return localVarFp.describeImageApiV1DescribeImagePost(file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Post Feedback
         * @param {FeedbackRequestSchema} feedbackRequestSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postFeedbackApiV1FeedbackPost(feedbackRequestSchema: FeedbackRequestSchema, options?: any): AxiosPromise<FeedbackRequestSchema> {
            return localVarFp.postFeedbackApiV1FeedbackPost(feedbackRequestSchema, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Process Voice Command
         * @param {VoiceCommandRequest} voiceCommandRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processVoiceCommandApiV1VoiceNavigationCommandPost(voiceCommandRequest: VoiceCommandRequest, options?: any): AxiosPromise<any> {
            return localVarFp.processVoiceCommandApiV1VoiceNavigationCommandPost(voiceCommandRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Translate Text List
         * @param {TranslationSchema} translationSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        translateTextListApiV1TranslatePost(translationSchema: TranslationSchema, options?: any): AxiosPromise<any> {
            return localVarFp.translateTextListApiV1TranslatePost(translationSchema, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ApiApi - interface
 * @export
 * @interface ApiApi
 */
export interface ApiApiInterface {
    /**
     * 
     * @summary Convert Audio
     * @param {string} text 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApiInterface
     */
    convertAudioApiV1ConvertAudioPost(text: string, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Describe Image
     * @param {File} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApiInterface
     */
    describeImageApiV1DescribeImagePost(file: File, options?: RawAxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Post Feedback
     * @param {FeedbackRequestSchema} feedbackRequestSchema 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApiInterface
     */
    postFeedbackApiV1FeedbackPost(feedbackRequestSchema: FeedbackRequestSchema, options?: RawAxiosRequestConfig): AxiosPromise<FeedbackRequestSchema>;

    /**
     * 
     * @summary Process Voice Command
     * @param {VoiceCommandRequest} voiceCommandRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApiInterface
     */
    processVoiceCommandApiV1VoiceNavigationCommandPost(voiceCommandRequest: VoiceCommandRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;

    /**
     * 
     * @summary Translate Text List
     * @param {TranslationSchema} translationSchema 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApiInterface
     */
    translateTextListApiV1TranslatePost(translationSchema: TranslationSchema, options?: RawAxiosRequestConfig): AxiosPromise<any>;

}

/**
 * ApiApi - object-oriented interface
 * @export
 * @class ApiApi
 * @extends {BaseAPI}
 */
export class ApiApi extends BaseAPI implements ApiApiInterface {
    /**
     * 
     * @summary Convert Audio
     * @param {string} text 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public convertAudioApiV1ConvertAudioPost(text: string, options?: RawAxiosRequestConfig) {
        return ApiApiFp(this.configuration).convertAudioApiV1ConvertAudioPost(text, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Describe Image
     * @param {File} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public describeImageApiV1DescribeImagePost(file: File, options?: RawAxiosRequestConfig) {
        return ApiApiFp(this.configuration).describeImageApiV1DescribeImagePost(file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Post Feedback
     * @param {FeedbackRequestSchema} feedbackRequestSchema 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public postFeedbackApiV1FeedbackPost(feedbackRequestSchema: FeedbackRequestSchema, options?: RawAxiosRequestConfig) {
        return ApiApiFp(this.configuration).postFeedbackApiV1FeedbackPost(feedbackRequestSchema, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Process Voice Command
     * @param {VoiceCommandRequest} voiceCommandRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public processVoiceCommandApiV1VoiceNavigationCommandPost(voiceCommandRequest: VoiceCommandRequest, options?: RawAxiosRequestConfig) {
        return ApiApiFp(this.configuration).processVoiceCommandApiV1VoiceNavigationCommandPost(voiceCommandRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Translate Text List
     * @param {TranslationSchema} translationSchema 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public translateTextListApiV1TranslatePost(translationSchema: TranslationSchema, options?: RawAxiosRequestConfig) {
        return ApiApiFp(this.configuration).translateTextListApiV1TranslatePost(translationSchema, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PublicApi - axios parameter creator
 * @export
 */
export const PublicApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get widget configuration for CI/CD builds  This endpoint is used by GitHub Actions to fetch the latest config Authentication: X-API-Key header
         * @summary Get Widget Config
         * @param {string} xApiKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWidgetConfigPublicWidgetConfigGet: async (xApiKey: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xApiKey' is not null or undefined
            assertParamExists('getWidgetConfigPublicWidgetConfigGet', 'xApiKey', xApiKey)
            const localVarPath = `/public/widget/config`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xApiKey != null) {
                localVarHeaderParameter['x-api-key'] = String(xApiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PublicApi - functional programming interface
 * @export
 */
export const PublicApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PublicApiAxiosParamCreator(configuration)
    return {
        /**
         * Get widget configuration for CI/CD builds  This endpoint is used by GitHub Actions to fetch the latest config Authentication: X-API-Key header
         * @summary Get Widget Config
         * @param {string} xApiKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWidgetConfigPublicWidgetConfigGet(xApiKey: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WidgetConfigPublicResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWidgetConfigPublicWidgetConfigGet(xApiKey, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PublicApi.getWidgetConfigPublicWidgetConfigGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PublicApi - factory interface
 * @export
 */
export const PublicApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PublicApiFp(configuration)
    return {
        /**
         * Get widget configuration for CI/CD builds  This endpoint is used by GitHub Actions to fetch the latest config Authentication: X-API-Key header
         * @summary Get Widget Config
         * @param {string} xApiKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWidgetConfigPublicWidgetConfigGet(xApiKey: string, options?: any): AxiosPromise<WidgetConfigPublicResponse> {
            return localVarFp.getWidgetConfigPublicWidgetConfigGet(xApiKey, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PublicApi - interface
 * @export
 * @interface PublicApi
 */
export interface PublicApiInterface {
    /**
     * Get widget configuration for CI/CD builds  This endpoint is used by GitHub Actions to fetch the latest config Authentication: X-API-Key header
     * @summary Get Widget Config
     * @param {string} xApiKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApiInterface
     */
    getWidgetConfigPublicWidgetConfigGet(xApiKey: string, options?: RawAxiosRequestConfig): AxiosPromise<WidgetConfigPublicResponse>;

}

/**
 * PublicApi - object-oriented interface
 * @export
 * @class PublicApi
 * @extends {BaseAPI}
 */
export class PublicApi extends BaseAPI implements PublicApiInterface {
    /**
     * Get widget configuration for CI/CD builds  This endpoint is used by GitHub Actions to fetch the latest config Authentication: X-API-Key header
     * @summary Get Widget Config
     * @param {string} xApiKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    public getWidgetConfigPublicWidgetConfigGet(xApiKey: string, options?: RawAxiosRequestConfig) {
        return PublicApiFp(this.configuration).getWidgetConfigPublicWidgetConfigGet(xApiKey, options).then((request) => request(this.axios, this.basePath));
    }
}



