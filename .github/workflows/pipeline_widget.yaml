name: Deploy Widget to Cloudflare Pages

on:
  push:
    paths:
      - 'apps/widget/**'
    branches:
      - main
      - develop

  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - development

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '10.11.0'

jobs:
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
    steps:
      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.event.inputs.environment }}" != "" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=development" >> $GITHUB_OUTPUT
          else
            echo "environment=development" >> $GITHUB_OUTPUT
          fi

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: determine-environment

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Verify pnpm installation
        run: |
          which pnpm
          pnpm --version

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Fetch configuration and generate environment variables
        run: |
          echo "📋 Fetching configuration from API..."
          ENV="${{ needs.determine-environment.outputs.environment }}"

          # Fetch config from API
          CONFIG_JSON=$(curl -s -H "X-API-Key: ${{ secrets.CONFIG_API_KEY }}" \
            "${{ secrets.BACKEND_API_URL }}/public/widget/config")

          if [ $? -ne 0 ]; then
            echo "❌ Failed to fetch configuration from API"
            exit 1
          fi

          echo "✅ Configuration fetched successfully"
          echo "$CONFIG_JSON" | jq '.'

          # Generate .env file directly from API response using jq
          echo "📝 Generating environment variables..."

          ENV_FILE="apps/widget/.env.$ENV"
          mkdir -p apps/widget

          {
            echo "# Generated from API at $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
            echo "VITE_WIDGET_VERSION=$(echo "$CONFIG_JSON" | jq -r '.version')"
            echo "VITE_ENVIRONMENT=$ENV"
            echo ""
            echo "# Feature Flags"
            echo "VITE_FEATURE_LANGUAGE_SELECTOR=$(echo "$CONFIG_JSON" | jq -r '.features.languageSelector.enabled')"
            echo "VITE_FEATURE_ACCESSIBILITY_PROFILES=$(echo "$CONFIG_JSON" | jq -r '.features.accessibilityProfiles.enabled')"
            echo ""
            echo "# Widget Controls"
            echo "$CONFIG_JSON" | jq -r '.features.widgetControls | to_entries[] | "VITE_FEATURE_\(.key | ascii_upcase)=\(.value.enabled)"'
          } > "$ENV_FILE"

          echo "✅ Generated $ENV_FILE"
          echo ""
          echo "📋 Environment variables:"
          cat "$ENV_FILE"

      - name: Build widget
        run: |
          ENV="${{ needs.determine-environment.outputs.environment }}"
          cp "apps/widget/.env.$ENV" "apps/widget/.env"
          pnpm run build:widget:prod
        env:
          NODE_ENV: production

      - name: Deploy to Cloudflare Pages (Production)
        if: needs.determine-environment.outputs.environment == 'production'
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: accessibility-widget
          directory: apps/widget/dist/widget
          gitHubToken: ${{ secrets.DEPLOYMENT_TOKEN }}

      - name: Deploy to Cloudflare Pages (Development)
        if: needs.determine-environment.outputs.environment == 'development'
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: accessibility-widget-dev
          directory: apps/widget/dist/widget
          gitHubToken: ${{ secrets.DEPLOYMENT_TOKEN }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: widget-build-${{ needs.determine-environment.outputs.environment }}
          path: apps/widget/dist/
          retention-days: 30

      - name: Output deployment info
        run: |
          ENV="${{ needs.determine-environment.outputs.environment }}"
          if [[ "$ENV" == "production" ]]; then
            echo "🚀 Widget deployed to production: https://accessibility-widget.pages.dev"
          else
            echo "🚀 Widget deployed to development: https://accessibility-widget-dev.pages.dev"
          fi
