name: Deploy Widget to Cloudflare Pages

on:
  push:
    paths:
      - 'apps/widget/**'
      - 'configs/widget/**'
      - 'scripts/**'
    branches:
      - main
      - develop

  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - development

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '9'

jobs:
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      config-exists: ${{ steps.config.outputs.exists }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.event.inputs.environment }}" != "" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=development" >> $GITHUB_OUTPUT
          else
            echo "environment=development" >> $GITHUB_OUTPUT
          fi

      - name: Check if config exists
        id: config
        run: |
          ENV="${{ steps.env.outputs.environment }}"
          if [[ -f "configs/widget/${ENV}.json" ]]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: determine-environment

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Create config directory if not exists
        run: mkdir -p configs/widget scripts

      - name: Create default config if needed
        if: needs.determine-environment.outputs.config-exists == 'false'
        run: |
          ENV="${{ needs.determine-environment.outputs.environment }}"
          cat > "configs/widget/${ENV}.json" << 'EOF'
          {
            "version": "1.0.0",
            "environment": "${{ needs.determine-environment.outputs.environment }}",
            "lastUpdated": "${{ github.event.head_commit.timestamp }}",
            "features": {
              "languageSelector": { "enabled": true },
              "accessibilityProfiles": { "enabled": true },
              "widgetControls": {
                "contrast": { "enabled": true },
                "reader": { "enabled": false },
                "fontSize": { "enabled": true },
                "fontFamily": { "enabled": true },
                "lineHeight": { "enabled": true },
                "letterSpacing": { "enabled": true },
                "disableAnimations": { "enabled": true },
                "hideImages": { "enabled": true },
                "readingGuide": { "enabled": true },
                "voiceNavigation": { "enabled": true },
                "highlightLinks": { "enabled": true },
                "saturation": { "enabled": true },
                "colorFilter": { "enabled": true }
              }
            }
          }
          EOF

      - name: Create config generator script if needed
        run: |
          if [[ ! -f "scripts/generate-widget-env.js" ]]; then
            cat > scripts/generate-widget-env.js << 'EOF'
          const fs = require('fs');
          const path = require('path');

          const environment = process.argv[2] || 'development';
          const configPath = path.join(process.cwd(), 'configs', 'widget', `${environment}.json`);
          const envOutputPath = path.join(process.cwd(), 'apps', 'widget', `.env.${environment}`);

          console.log(`📋 Reading config from: ${configPath}`);

          if (!fs.existsSync(configPath)) {
            console.error(`❌ Config file not found: ${configPath}`);
            process.exit(1);
          }

          const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));

          const envVars = [];
          envVars.push(`# Generated from ${configPath} at ${new Date().toISOString()}`);
          envVars.push(`VITE_WIDGET_VERSION=${config.version}`);
          envVars.push(`VITE_ENVIRONMENT=${environment}`);

          // Feature flags
          const features = config.features;
          envVars.push(`VITE_FEATURE_LANGUAGE_SELECTOR=${features.languageSelector.enabled}`);
          envVars.push(`VITE_FEATURE_ACCESSIBILITY_PROFILES=${features.accessibilityProfiles.enabled}`);

          // Widget controls
          Object.entries(features.widgetControls).forEach(([key, value]) => {
            const envKey = `VITE_FEATURE_${key.toUpperCase()}`;
            envVars.push(`${envKey}=${value.enabled}`);
          });

          fs.writeFileSync(envOutputPath, envVars.join('\n'));
          console.log(`✅ Generated ${envOutputPath} with ${envVars.length} variables`);
          EOF
          fi

      - name: Generate environment variables from config
        run: |
          ENV="${{ needs.determine-environment.outputs.environment }}"
          node scripts/generate-widget-env.js $ENV
          echo "📋 Generated environment variables for: $ENV"

      - name: Build widget
        run: |
          ENV="${{ needs.determine-environment.outputs.environment }}"
          cp "apps/widget/.env.$ENV" "apps/widget/.env"
          pnpm run build:widget:prod
        env:
          NODE_ENV: production

      - name: Deploy to Cloudflare Pages (Production)
        if: needs.determine-environment.outputs.environment == 'production'
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: accessibility-widget
          directory: apps/widget/dist/widget
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to Cloudflare Pages (Development)
        if: needs.determine-environment.outputs.environment == 'development'
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: accessibility-widget-dev
          directory: apps/widget/dist/widget
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: widget-build-${{ needs.determine-environment.outputs.environment }}
          path: apps/widget/dist/
          retention-days: 30

      - name: Output deployment info
        run: |
          ENV="${{ needs.determine-environment.outputs.environment }}"
          if [[ "$ENV" == "production" ]]; then
            echo "🚀 Widget deployed to production: https://accessibility-widget.pages.dev"
          else
            echo "🚀 Widget deployed to development: https://accessibility-widget-dev.pages.dev"
          fi
